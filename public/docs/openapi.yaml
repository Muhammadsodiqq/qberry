openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/user-flow/get:
    get:
      summary: 'Get all information about location, room'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - "Api's for users flow"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                count:
                  type: integer
                  description: 'Count of items per page . Default is 10.'
                  example: 4
                page:
                  type: integer
                  description: 'Page number . Default is 1.'
                  example: 6
      security: []
  '/api/user-flow/calculate/{location_id}':
    post:
      summary: 'calculate area, sum of blocks'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - "Api's for users flow"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                width:
                  type: number
                  description: 'width of the block. Must be at least 1.'
                  example: 0
                height:
                  type: number
                  description: 'height of the block. Must be at least 1.'
                  example: 0
                length:
                  type: number
                  description: 'length of the block. Must be at least 2.'
                  example: 0
                temperature:
                  type: number
                  description: 'temperature of the room. Must be at least 1.'
                  example: 1
                to_date:
                  type: integer
                  description: 'date of the end of the booking. Must not be greater than 24.'
                  example: 19
              required:
                - width
                - height
                - length
                - temperature
                - to_date
      security: []
    parameters:
      -
        in: path
        name: location_id
        description: 'The ID of the location.'
        example: autem
        required: true
        schema:
          type: string
  /api/user-flow/book-booking:
    post:
      summary: 'Book blocks'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - "Api's for users flow"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  description: ''
                  example:
                    - 9
                  items:
                    type: integer
                booking_days:
                  type: integer
                  description: 'Number of days of the booking. Must not be greater than 24.'
                  example: 1
              required:
                - id
                - booking_days
      security: []
  /api/user-flow/get-my-bookings:
    get:
      summary: 'Get My bookings'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - "Api's for users flow"
      security: []
  /api/block/create:
    post:
      summary: 'Create Block'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Api for blocks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: fktirlcqbshxnnkaxjlgnixwzsyayoqtqgudwtfqccdhpdkwgzeyezvofcfdccbelzahcdvirwdeuirwhwuygjgkvfwwzblwaxcuwzgvgdlcwlbzolgrityhxbldancpdckqnvhngxgptespeqawhbznxymutthnfycsdwpdedhwmouhepzlhizuypjzldcwkemjqteyirpmrlzurbtvgbwlcoxadjigczaxlvhmj
                price:
                  type: number
                  description: ''
                  example: 177276.47
                width:
                  type: number
                  description: ''
                  example: 157867.614057
                height:
                  type: number
                  description: ''
                  example: 2498363.7316253
                length:
                  type: number
                  description: ''
                  example: 895018.5881
                room_id:
                  type: integer
                  description: ''
                  example: 3
              required:
                - name
                - price
                - width
                - height
                - length
                - room_id
      security: []
  '/api/block/get-by-room-id/{room_id}':
    get:
      summary: 'Get  blocks by room_id'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Api for blocks'
      security: []
    parameters:
      -
        in: path
        name: room_id
        description: 'The ID of the room.'
        example: sint
        required: true
        schema:
          type: string
  /api/fridge/create:
    post:
      summary: 'Create Fridge'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Api for fridges'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the fridge. Must not be greater than 255 characters.'
                  example: wcznhcjioqpolkfxdmmpinrubuygetuazykpkewftrypmxpaufmsdadqtdaqakuuysfvcilbibeeprbldeqxezqspgowstflgsrqinuwbhvrkewqsuzjpzrkelcpytlrosrfxjdryholhvbgikjvqivhinxqdpcrssotldnnbxveinimbfjcyovgtgxivnvdmexkpwewtqeefsolzuejbsyikqvbnroejsmlnklunthyuail
                block_id:
                  type: integer
                  description: 'Block id of the fridge.'
                  example: 8
              required:
                - name
                - block_id
      security: []
  /api/fridge/getByBlockId:
    get:
      summary: 'Get  fridges by block_id'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Api for fridges'
      security: []
  /api/location/create:
    post:
      summary: 'Create Location'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Api for locations'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                country_name:
                  type: string
                  description: 'Country name. Must not be greater than 255 characters.'
                  example: okkzndjlcdugjqnyfqmxvdtmsjjxdrupflizjmwihfoxsqxwzunzgxhbsocpmpblezqypbheqoxjwsenyesbgkutwkcfnbseoqbyqmdtmnfwyktsvntcbiptwuryfxczyveqonjksefyrmkugfwfltyekrzmnagho
                city_name:
                  type: string
                  description: 'City name. Must not be greater than 255 characters.'
                  example: msbeqrpndjsxoqxfvymwgbsojspqgmfkjbdrhpndbhwwtgiztbjbsvxvwdyeb
              required:
                - country_name
                - city_name
      security: []
  /api/location/get:
    get:
      summary: 'Get all locations'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Api for locations'
      security: []
  /api/role/get:
    get:
      summary: 'Get all roles'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Api for roles'
      security: []
  /api/room/create:
    post:
      summary: 'Create Room'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Api for rooms'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                temperature:
                  type: number
                  description: 'Temperature of the room. Must be one of <code>4</code>, <code>3</code>, <code>2</code>, <code>1</code>, or <code>0</code>.'
                  example: '4'
                location_id:
                  type: integer
                  description: 'Location id of the room.'
                  example: 8
                name:
                  type: string
                  description: 'Name of the room. Must not be greater than 255 characters.'
                  example: esmbvocpqcaheonjkjgvzksitnhoonswgyhvxhntjpewgpjguxslufaftiiwobqfpoegtxlcxyjnxyizxqozieegvhsxadpjmkbrwwctukckasjlhgpsdhjxcvlgxtelqblcqardjvsjpimgnmwdjmilzyatidjyhdqzgilantromseiwjt
              required:
                - temperature
                - location_id
                - name
      security: []
  /api/room/get:
    get:
      summary: 'Get all rooms'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Api for rooms'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                count:
                  type: integer
                  description: 'Count of items per page . Default is 10.'
                  example: 4
                page:
                  type: integer
                  description: 'Page number . Default is 1.'
                  example: 12
      security: []
  /api/login:
    post:
      summary: 'Login User'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Api for users'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 40 characters.'
                  example: dzwcxkwvxiigwrupdrlvby
                password:
                  type: string
                  description: 'Must be at least 4 characters.'
                  example: bpqv
              required:
                - email
                - password
      security: []
  /api/user/create:
    post:
      summary: 'Create User'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Api for users'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user. Must not be greater than 255 characters.'
                  example: zdehxepeuudmosuqhabppdjqghurugkfblnpwflmrqvakelmakdnzkitu
                email:
                  type: string
                  description: 'The email of the user. Must be a valid email address. Must not be greater than 40 characters.'
                  example: pjju
                role_id:
                  type: integer
                  description: 'The role id of the user.'
                  example: 9
              required:
                - name
                - email
                - role_id
      security: []
  /api/user/update-own:
    post:
      summary: 'Update Own password'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Api for users'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: ''
                  example: voluptatem
              required:
                - password
      security: []
tags:
  -
    name: "Api's for users flow"
    description: ''
  -
    name: 'Api for blocks'
    description: ''
  -
    name: 'Api for fridges'
    description: ''
  -
    name: 'Api for locations'
    description: ''
  -
    name: 'Api for roles'
    description: ''
  -
    name: 'Api for rooms'
    description: ''
  -
    name: 'Api for users'
    description: ''
